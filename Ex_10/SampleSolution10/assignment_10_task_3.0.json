{"camera":{"position":[7.681972236292045,8.356898188018263,12.998912128740464],"target":[0.49369210515537304,0.7842427482273157,-0.6929375842384542],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":{"name":"planes.obj","content":"v -4.0 0.0 -4.0\nv 4.0 0.0 -4.0\nv 4.0 0.0 4.0\nv -4.0 0.0 4.0\nf 1 2 3\nf 1 3 4\nv -4.0 4.0 -4.0\nv 4.0 4.0 -4.0\nv 4.0 4.0 4.0\nv -4.0 4.0 4.0\nf 5 6 7\nf 5 7 8\nv -4.0 8.0 -4.0\nv 4.0 8.0 -4.0\nv 4.0 8.0 4.0\nv -4.0 8.0 4.0\nf 9 10 11\nf 9 11 12\n"},"position":[0,0,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","blendEnable":true,"blendOperation":"FUNC_ADD","srcColorBlendFactor":"SRC_ALPHA","dstColorBlendFactor":"ONE_MINUS_SRC_ALPHA","srcAlphaBlendFactor":"SRC_ALPHA","dstAlphaBlendFactor":"ONE_MINUS_SRC_ALPHA","textureFiltering":"LINEAR_MIPMAP_LINEAR","maxAnisotropy":"1"},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex position in object space coordinates\nin vec3 vertexPosition;\n// Surface normal at the vertex in object space coordinates\nin vec3 vertexNormal;\n// Texture coordinates at that vertex\nin vec2 vertexTextureCoordinates;\n\nout vec3 fragmentPositionModel;\n\n// Model matrix\nuniform mat4 mMatrix;\n// View matrix\nuniform mat4 vMatrix;\n// Projection matrix\nuniform mat4 pMatrix;\n\n// Main program for each vertex\nvoid main() {\n  vec4 vertexCamSpace = vMatrix * mMatrix * vec4(vertexPosition, 1.0);\n  gl_Position = pMatrix * vertexCamSpace;\n\n  fragmentPositionModel = vertexPosition;\n}"},"fragment":{"source":"#version 300 es\n\n// For better performance less precision\nprecision highp float;\nin vec3 fragmentPositionModel;\nout vec4 fragColor;\n\n// Main program for each fragment = pixel candidate\nvoid main() {\n  vec3 color;\n  if (fragmentPositionModel.y < 2.0) {\n    color = vec3(1.0, 0.0, 0.0);\n  } else if (fragmentPositionModel.y < 6.0) {\n    color = vec3(0.0, 1.0, 0.0);\n  } else {\n    color = vec3(0.0, 0.0, 1.0);\n  }\n  fragColor = vec4(color, 0.5);\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex coordinates in object space for the render quad\nin vec3 vertexPosition;\n// Texture coordinate for this vertex and the render quad\nin vec2 vertexTextureCoordinates;\n\n// Texture coordinate needs to be passed on to the R2T fragment shader\nout vec2 fragmentTextureCoordinates;\n\n// Main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  fragmentTextureCoordinates = vertexTextureCoordinates;\n}"},"fragment":{"source":"#version 300 es\n\nprecision highp float;\n\n// A texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n// Texture coordinates coming from the vertex shader, interpolated through the rasterizer\nin vec2 fragmentTextureCoordinates;\nout vec4 fragColor;\n\n// Main program for each fragment of the render quad\nvoid main() {\n  fragColor = texture(textureRendered, fragmentTextureCoordinates.st);\n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"}}}}}},"output":{"image":"Quad/R2T Pass color"}}