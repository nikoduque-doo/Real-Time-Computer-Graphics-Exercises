{"camera":{"position":[1.0188134951903325,12.115392556664924,27.498395612859017],"target":[0,0,0],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":"teapot","position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","blendEnable":true,"blendOperation":"FUNC_ADD","srcColorBlendFactor":"SRC_ALPHA","dstColorBlendFactor":"ONE_MINUS_SRC_ALPHA","srcAlphaBlendFactor":"SRC_ALPHA","dstAlphaBlendFactor":"ONE_MINUS_SRC_ALPHA","textureFiltering":"LINEAR_MIPMAP_LINEAR","maxAnisotropy":"1"},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex position in object space coordinates\nin vec3 vertexPosition;\n// Surface normal at the vertex in object space coordinates\nin vec3 vertexNormal;\n// Texture coordinates at that vertex\nin vec2 vertexTextureCoordinates;\n\n// Model matrix\nuniform mat4 mMatrix;\n// View matrix\nuniform mat4 vMatrix;\n// Projection matrix\nuniform mat4 pMatrix;\n\nout vec3 fragN;\nout vec3 fragPos;\nout vec3 camPos;\n\n// Main program for each vertex\nvoid main() {\n  vec4 vertexCamSpace = vMatrix * mMatrix * vec4(vertexPosition, 1.0);\n  gl_Position = pMatrix * vertexCamSpace;\n\n  fragN = (transpose(inverse(mMatrix)) * vec4(vertexNormal, 0.0)).xyz;\n  fragPos = (mMatrix * vec4(vertexPosition, 1.0)).xyz;\n  camPos = (inverse(vMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;\n}"},"fragment":{"source":"#version 300 es\n\n// For better performance less precision\nprecision highp float;\nout vec4 fragColor;\n\nuniform vec3 lightPos;\nuniform vec3 baseColor;\nuniform vec3 lightColor;\nuniform float Kd;\nuniform float Ka;\nuniform float Ks;\nuniform bool Blinn_Phong;\n\nin vec3 fragN;\nin vec3 fragPos;\nin vec3 camPos;\n\n// Main program for each fragment = pixel candidate\nvoid main() {\n  vec3 n = normalize(fragN);\n  vec3 l = normalize(lightPos - fragPos);\n  vec3 v = normalize(camPos - fragPos);\n  vec3 r = normalize(2.0 * dot(n,l) * (n-l));\n  vec3 h = normalize (l + v); // Blinn-Phong\n  \n  float Ia = Ka;\n  float Id = Kd * clamp(dot(n,l), 0.0, 1.0);\n  float Is = Ks * clamp(pow(dot(r,v),20.0), 0.0, 1.0);\n  float IsBP = Ks * clamp(pow(dot(h,n),80.0), 0.0, 1.0); // Blinn-Phong\n  \n  vec3 color = ((((Kd * Id) + (Ka * Ia)) * baseColor) + (Ks * Is)) * lightColor;\n  vec3 colorBP = ((((Kd * Id) + (Ka * Ia)) * baseColor) + (Ks * IsBP)) * lightColor;\n\n  if(Blinn_Phong){\n    fragColor = vec4(colorBP, 1.0);\n  } else {\n    fragColor = vec4(color, 1.0);\n  }\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"lightPos":{"value":[-80,50,80]},"baseColor":{"value":[1,0,0]},"lightColor":{"value":[1,1,1]},"Kd":{"value":[1]},"Ka":{"value":[0.5]},"Ks":{"value":[0.5]},"Blinn_Phong":{"value":[true]}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex coordinates in object space for the render quad\nin vec3 vertexPosition;\n// Texture coordinate for this vertex and the render quad\nin vec2 vertexTextureCoordinates;\n\n// Texture coordinate needs to be passed on to the R2T fragment shader\nout vec2 fragmentTextureCoordinates;\n\n// Main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  fragmentTextureCoordinates = vertexTextureCoordinates;\n}"},"fragment":{"source":"#version 300 es\n\nprecision highp float;\n\n// A texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n// Texture coordinates coming from the vertex shader, interpolated through the rasterizer\nin vec2 fragmentTextureCoordinates;\nout vec4 fragColor;\n\n// Main program for each fragment of the render quad\nvoid main() {\n  fragColor = texture(textureRendered, fragmentTextureCoordinates.st);\n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"}}}}}},"output":{"image":"Quad/R2T Pass color"}}